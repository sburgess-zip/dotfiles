# .bashrc

#on OSX 10.9 ls --color does not exist, and on the linux systems i checked
#-G changed grouping, not color. hopefully this switch keeps it clear.
if [ `uname` == Darwin ]; then
	alias ls="ls -G -p"
else
	alias ls="ls --color -p"
fi
alias l="ls"
alias ll="ls -lh"
alias la="ls -a"
alias ifc="/sbin/ifconfig"
alias sue="sudo vim "
alias op="opera &"
alias go="cd /tmp; google-chrome &"
alias wha="whoami;hostname;hostname -i; pwd"
#I use readlink -f all the time to print out a path to grab with tmux
alias rf="readlink -f "

#git helpers
alias gitk="gitk --all &"
alias gs="git status"
alias gb="git branch -a"
#a pretty terminal history viewer, decorate=short provided branch information
alias gl="git log --graph --decorate=short"
#adds the --stat to get file info, if you want it more in a git status
#context, use --name-status
alias gla="gl --stat"
alias gcom="git commit -v"
#fetch from all remotes
alias gf="git fetch --all"

#zfs is all rootspace
alias zfs="sudo zfs"
alias zpool="sudo zpool"
alias zdb="sudo zdb"

#some zfs helpers
alias mst="date +'%s'"
alias zmount="zfs list -o name,mounted,mountpoint,canmount"
#list all the snapshots for a given filesystem, with some helpful data.
#-t snapshot so you don't get data about any child filesystems
#-d 1 so you can get its snapshots, without -r, regardless of listsnapshots
#-o name     to know what its name
#   used     how much space is consumed by this snapshot
#   refer    the size of the filesystem at the time this snapshot was taken
#   written  how much data was written to this file system since the last snap
alias zsnaps="zfs list -t snapshot -d 1 -o name,used,refer,written"

#tmux shortcuts
#list the current sessions
alias tml="tmux list-sessions"
#set up for starting a new named session
alias tmn="tmux new -s"
#set up for connecting to a named session
alias tmr="tmux attach -t"

# A trending repo one day was getting a terminal wipe with pound signs
# I liked the idea, but since I am a sucker for 80 char borders, I wrote
# this to show where 80 chars was, and give me a bit of a screen wipe

# Build a string of 80 pund signs once
poundsigns=""
for i in {1..80}; do poundsigns=${poundsigns}'#'; done;
#print that string 40 times, each echo gives us a newline
hr () {
    for i in {1..40}; do echo ${poundsigns}; done;
}

PS1='$PWD > '
